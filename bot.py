import os
import tempfile
import asyncio
import aiohttp
import time
import logging
import re

from pathlib import Path
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from html import escape
from dotenv import load_dotenv

from auth import check_user_registered, register_user, log_action
from audio_utils import handle_audio_file, split_audio, create_transcript_pdf, create_transcript_txt 
from salute_speech_api import transcribe_audio
from gigachat_api import get_access_token, send_prompt, upload_file_to_gigachat 



# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –±–æ—Ç–∞ ===
load_dotenv()
bot = Bot(
    token=os.getenv("TG_BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
log_level = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=getattr(logging, log_level, logging.INFO))


# === –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
last_transcriptions = {}

# === –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ===
SYSTEM_PROMPT = (
    "–í–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º .txt-—Ñ–∞–π–ª–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ–≤–µ—â–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
    "–ù–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –≤ —Å—Ç—Ä–æ–≥–æ –¥–µ–ª–æ–≤–æ–º –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. –û—Ç—á—ë—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:\n\n"
    "1. –¢–µ–º–∞ —Å–æ–≤–µ—â–∞–Ω–∏—è ‚Äî –∫—Ä–∞—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è.\n\n"
    "2. –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏ ‚Äî –∏–∑–ª–æ–∂–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –ø–æ–≤–µ—Å—Ç–∫–∏ –¥–Ω—è –∏ –≤–∞–∂–Ω—ã–µ –≤—ã–≤–æ–¥—ã, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.\n\n"
    "3. –î–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—Ä—É—á–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
    "4. –û—Ü–µ–Ω–∫–∞ —Å–æ–≤–µ—â–∞–Ω–∏—è ‚Äî –¥–∞–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —Ö–æ–¥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–≤–µ—â–∞–Ω–∏—è.\n\n"
    "5. –†–µ–∑—é–º–µ ‚Äî –ø–æ–¥–≤–µ–¥–∏ –æ–±—â–∏–π –∏—Ç–æ–≥.\n\n"
    "–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Ü–∏—Ç–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –≤—ã–≤–æ–¥–æ–≤. –û—Ç—á—ë—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º, –Ω–æ –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ ‚Äî –≤ –≤–∏–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ø–∏—Å–∫–∞."
)



# === –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Markdown ‚Üí HTML (—Ç–æ–ª—å–∫–æ –∂–∏—Ä–Ω—ã–π –∏ –∫—É—Ä—Å–∏–≤) ===
def markdown_to_html(text: str) -> str:
    # –∂–∏—Ä–Ω—ã–π **text**
    text = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", text)
    # –∫—É—Ä—Å–∏–≤ *text*
    text = re.sub(r"(?<!\*)\*(?!\*)(.+?)(?<!\*)\*(?!\*)", r"<i>\1</i>", text)
    return text



# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å—Ç–∞—Ä—Ç–∞ ===
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/start")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
)



# === –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===
# —Ñ–∞–±—Ä–∏–∫–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
def log_timing(name: str):
    # –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
    def decorator(func):
        # —Å–∞–º–∞ —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –æ–±–µ—Ä–Ω—É—Ç–æ–π –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
        async def wrapper(*args, **kwargs):
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            start = time.time()
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = await func(*args, **kwargs)
            # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            elapsed = time.time() - start
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
            logging.info(f"[‚è±] {name} –∑–∞–Ω—è–ª–æ {elapsed:.2f} —Å–µ–∫.")

            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω message –∏ username, –ª–æ–≥–∏—Ä—É–µ–º –≤ Airtable
            for arg in args:
                if isinstance(arg, Message):
                    user_id = arg.from_user.id
                    username = arg.from_user.username

                    asyncio.create_task(log_action(user_id, username, f"{name} –∑–∞–Ω—è–ª–æ {elapsed:.2f} —Å–µ–∫."))
                    break

            return result
        return wrapper
    return decorator



# === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram ===
@log_timing("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å Telegram") # -- –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
async def download_telegram_file(file_id: str, temp_paths: list[str]) -> str:
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –ø–æ –µ–≥–æ ID —á–µ—Ä–µ–∑ Telegram API
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = await bot.get_file(file_id)
        print(f"[DEBUG] file_id: {file_id}")
        print(f"[DEBUG] file_path: {file_info.file_path}")
        print(f"[DEBUG] file_size: {file_info.file_size}")
        print(f"[DEBUG] file_info: {file_info}")

    except Exception as e:
        # Telegram –Ω–µ –¥–∞–ª —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        raise Exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ Telegram: {e}")



    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}"

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
    temp_paths.append(temp_file.name)

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as response:
            if response.status == 200:
                # –°—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                content = await response.read()
                temp_file.write(content)
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.status}")

    temp_file.close()
    return temp_file.name  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É



# === –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ ===
def split_text(text: str, max_length: int = 4096) -> list[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ max_length —Å–∏–º–≤–æ–ª–æ–≤.

    –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–º –≥—Ä–∞–Ω–∏—Ü–∞–º: –∞–±–∑–∞—Ü—ã, 
    –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∑–∞–ø—è—Ç—ã–µ, —Ç–∏—Ä–µ. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∏—Ç–∞–µ–º—ã–º –∏ 
    –ø—Ä–∏–≥–æ–¥–Ω—ã–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã –∏–ª–∏ API —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.
    """
    chunks = []
    while len(text) > max_length:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∏–ª—É—á—à—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
        for sep in ["\n", ". ", ", ", " ‚Äî ", " ‚Äì ", " - "]:
            split_at = text.rfind(sep, 0, max_length)
            if split_at != -1:
                split_at += len(sep)  # –≤–∫–ª—é—á–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –∫—É—Å–æ–∫
                break
        else:
            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∂—ë—Å—Ç–∫–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
            split_at = max_length

        chunks.append(text[:split_at].strip())
        text = text[split_at:].strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    if text:
        chunks.append(text)
    return chunks



# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ ===
@log_timing("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ") # -- –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏ Airtable –≤—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
async def process_audio_file(file_path: str, message: Message) -> str:
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    processed_path = handle_audio_file(file_path)
    # –†–∞–∑–±–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏
    parts = split_audio(processed_path)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    transcript = ""
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    await message.answer(f"üéß –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å ({len(parts)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤)...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    status_msg = await message.answer("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ 1...")

    for idx, part_path in enumerate(parts):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤–º–µ—Å—Ç–æ —Å–ø–∞–º–∞
        await status_msg.edit_text(f"‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ {idx + 1} –∏–∑ {len(parts)}...")

        try:
            part_text = await transcribe_audio(part_path)
            transcript += part_text + "\n"
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —á–∞—Å—Ç–∏ {idx + 1}. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n{e}")
            break
        finally:
            try:
                os.remove(part_path)
            except Exception:
                pass

        await asyncio.sleep(0.1)

    return transcript.strip()


# === –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GigaChat ===
@log_timing("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ GigaChat") # -- –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏ Airtable –≤—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
async def analyze_text(transcript: str, system_prompt: str, message: Message, date_str: Path) -> str:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    prompt = f"{system_prompt.strip()}"
    token = await get_access_token()
    # –°–æ–∑–¥–∞—ë–º TXT-—Ñ–∞–π–ª
    txt_path = create_transcript_txt(transcript, date_str)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ GigaChat
    file_id = await upload_file_to_gigachat(txt_path, token)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
    response = await send_prompt(prompt, token, attachment_ids=[file_id])

    result_text = response["content"]
    usage = response.get("usage", {})

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    used_prompt = usage.get("prompt_tokens", "?")
    used_completion = usage.get("completion_tokens", "?")
    total = usage.get("total_tokens", "?")

    # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    logging.info(f"–¢–æ–∫–µ–Ω—ã: prompt = {used_prompt}, completion = {used_completion}, total = {total}")

    # –õ–æ–≥ –≤ Airtable
    user_id = message.from_user.id
    username = message.from_user.username
    await log_action(
        user_id, 
        username, 
        f"[üìä] –¢–æ–∫–µ–Ω—ã: prompt = {used_prompt}, completion = {used_completion}, total = {total}"
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat
    return result_text



# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@router.message(Command("start"))
async def cmd_start(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
    user = await check_user_registered(user_id)
    if user:
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{user.get('–ò–û', ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'])[0]}</b>! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
            reply_markup=start_keyboard
        )
        await message.answer("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.")
    else:
        await register_user(user_id, username)
        await message.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã
    await log_action(user_id, username, "/start")



# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ ===
@router.message(F.content_type.in_({"voice", "audio", "document"}))
async def handle_audio(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    await log_action(user_id, username, "–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ")

    file = message.voice or message.audio or message.document
    temp_paths = []     # –•—Ä–∞–Ω–∏–º –ø—É—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    
    try:
        await message.answer("üì• –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ—Ñ–∞–π–ª...")
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å Telegram-—Å–µ—Ä–≤–µ—Ä–æ–≤
        downloaded_path = await download_telegram_file(file.file_id, temp_paths)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        temp_paths.append(downloaded_path)

        await message.answer("üõ† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
        transcript = await process_audio_file(downloaded_path, message)
        if not transcript:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-—Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î–ú–ú–ì–ì–ì–ì
        date_str = datetime.now().strftime("%d%m%Y")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        last_transcriptions[f"{user_id}_date"] = date_str

        # –°–æ–∑–¥–∞—ë–º PDF-—Ñ–∞–π–ª –∏ txt-—Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
        pdf_path = create_transcript_pdf(transcript, date_str)
        txt_path = create_transcript_txt(transcript, date_str)


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_document(types.FSInputFile(str(pdf_path)))
        await message.answer_document(types.FSInputFile(str(txt_path)))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        last_transcriptions[user_id] = transcript

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞--------------------
        await message.answer(
            f"üß† –í–æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:\n\n{escape(SYSTEM_PROMPT)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data="use_system_prompt")],
                [InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π", callback_data="custom_prompt")]
            ])
        )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        await log_action(user_id, username, f"–û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in temp_paths:
            try:
                os.remove(path)
            except Exception:
                pass



# === –í—ã–±—Ä–∞–ª–∏ —ç—Ç–æ: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ ===
@router.callback_query(F.data == "use_system_prompt")
async def handle_system_prompt_choice(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
    transcript = last_transcriptions.get(user_id)
    if not transcript:
        await callback.message.answer("‚ùó –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ.")
        return
    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await callback.message.edit_reply_markup()
    await callback.message.answer("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ GigaChat...")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑
        date_str = last_transcriptions.get(f"{user_id}_date")  # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫—ç—à–∞
        result = await analyze_text(transcript, SYSTEM_PROMPT, callback.message, date_str) # –ø–µ—Ä–µ–¥–∞—ë–º –µ—ë –≤ –∞–Ω–∞–ª–∏–∑
        await callback.message.answer("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        for chunk in split_text(markdown_to_html(result)):
            await callback.message.answer(chunk)
        await log_action(user_id, username, "–ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É")
    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")



# === –ò–ª–∏ —ç—Ç–æ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ ===
@router.callback_query(F.data == "custom_prompt")
async def handle_custom_prompt_choice(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –î–æ—Å—Ç–∞—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    transcript = last_transcriptions.get(user_id)
    if not transcript:
        await callback.message.answer("‚ùó –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ.")
        return
    # –£–¥–∞–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç:")



# === –ü—Ä–∏—Ü–µ–ø–ª—è–µ–º —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ ===
@router.message(F.text)
async def receive_custom_prompt(msg: Message):
    user_id = msg.from_user.id
    username = msg.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in last_transcriptions:
        return
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑
    prompt = msg.text
    await msg.answer("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ GigaChat...")
    try:
        transcript = last_transcriptions[user_id]
        
        date_str = last_transcriptions.get(f"{user_id}_date")  # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∫—ç—à–∞
        result = await analyze_text(transcript, prompt, msg, date_str)  # –ø–µ—Ä–µ–¥–∞—ë–º –µ—ë –≤ –∞–Ω–∞–ª–∏–∑

        await msg.answer("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        for chunk in split_text(markdown_to_html(result)):
            await msg.answer(chunk)
        await log_action(user_id, username, f"Custom prompt: {prompt}")
    except Exception as e:
        await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")




# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
     # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
